import os
import sys
import psycopg2
from psycopg2 import pool
import json
import time
import logging
from dotenv import load_dotenv
import traceback
import re

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger()

load_dotenv()

dbname = os.getenv("DB_NAME")
user = os.getenv("DB_USER")
password = os.getenv("DB_PASSWORD")
host = os.getenv("DB_HOST")

if not all([dbname, user, password, host]):
    logger.error("–ù–µ –≤—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω—ã.")
    sys.exit(1)

def init_db_pool():
    try:
        connection_pool = psycopg2.pool.SimpleConnectionPool(
            1, 10, dbname=dbname, user=user, password=password, host=host
        )
        logger.info("‚úÖ –ü—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π —Å –ë–î —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!")
        return connection_pool
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—É–ª–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π: {e}")
        sys.exit(1)


def clean_text(value):
    if isinstance(value, str):
        return re.sub(r'[\x00-\x1F\x7F-\x9F]', '', value)
    return value


connection_pool = init_db_pool()

def check_connection(conn):
    try:
        with conn.cursor() as cur:
            cur.execute('SELECT 1')
            conn.commit()
        return True
    except psycopg2.Error:
        return False

def execute_query(query, params):
    conn = None
    cur = None
    try:
        conn = connection_pool.getconn()
        
        if not check_connection(conn):
            logger.warning("üîÑ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î –ø–æ—Ç–µ—Ä—è–Ω–æ, –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ.")
            connection_pool.putconn(conn)
            conn = connection_pool.getconn()

        cur = conn.cursor()
        cur.execute(query, params)
        conn.commit()
        logger.info("‚úÖ –õ–æ–≥ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω –≤ –ë–î.")
        
    except psycopg2.Error as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ –ë–î: {e}")
        if conn:
            conn.rollback()
    finally:
        if cur:
            cur.close()
        if conn:
            connection_pool.putconn(conn)

log_file_path = "/var/log/nginx/access.log"

try:
    with open(log_file_path, 'r', encoding='utf-8', errors='ignore') as log_file:
        while True:
            line = log_file.readline()
            if not line:
                time.sleep(1)
                continue

            try:
                log = json.loads(line.strip())
            except json.JSONDecodeError:
                logger.warning("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π JSON —Ñ–æ—Ä–º–∞—Ç –≤ –ª–æ–≥–µ.")
                continue

            query = """
                INSERT INTO nginx_logs 
                (time_local, remote_addr, request, status, body_bytes_sent, http_referer, http_user_agent) 
                VALUES (%s, %s, %s, %s, %s, %s, %s)
            """
            params = (
                clean_text(log.get('time_local') or ''),
                clean_text(log.get('remote_addr') or ''),
                clean_text(log.get('request') or ''),
                log.get('status') or 0,
                log.get('body_bytes_sent') or 0,
                clean_text(log.get('http_referer', '')),
                clean_text(log.get('http_user_agent', ''))
            )
            execute_query(query, params)

except KeyboardInterrupt:
    logger.info("‚èπ –ü—Ä–æ–≥—Ä–∞–º–º–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.")

except Exception as e:
    logger.error(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
    logger.error(traceback.format_exc())

finally:
    try:
        connection_pool.closeall()
        logger.info("üîå –í—Å–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –ë–î –∑–∞–∫—Ä—ã—Ç—ã.")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π —Å –ë–î: {e}")